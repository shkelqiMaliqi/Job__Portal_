"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
<<<<<<< HEAD
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _jsxAstUtils = require("jsx-ast-utils");
var _schemas = require("../util/schemas");
var _getElementType = _interopRequireDefault(require("../util/getElementType"));
var _isHiddenFromScreenReader = _interopRequireDefault(require("../util/isHiddenFromScreenReader"));
/**
 * @fileoverview Enforce img alt attribute does not have the word image, picture, or photo.
 * @author Ethan Cohen
 */
=======

var _jsxAstUtils = require("jsx-ast-utils");

var _schemas = require("../util/schemas");

var _isHiddenFromScreenReader = _interopRequireDefault(require("../util/isHiddenFromScreenReader"));
>>>>>>> 2b8c8494cd2694e97572d3bff0553fd3efc6ca4c

/**
 * @fileoverview Enforce img alt attribute does not have the word image, picture, or photo.
 * @author Ethan Cohen
 */
// ----------------------------------------------------------------------------
// Rule Definition
// ----------------------------------------------------------------------------
<<<<<<< HEAD

=======
>>>>>>> 2b8c8494cd2694e97572d3bff0553fd3efc6ca4c
var REDUNDANT_WORDS = ['image', 'photo', 'picture'];
var errorMessage = 'Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.';
var schema = (0, _schemas.generateObjSchema)({
  components: _schemas.arraySchema,
  words: _schemas.arraySchema
});
<<<<<<< HEAD
var _default = exports["default"] = {
=======
module.exports = {
>>>>>>> 2b8c8494cd2694e97572d3bff0553fd3efc6ca4c
  meta: {
    docs: {
      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/img-redundant-alt.md',
      description: 'Enforce `<img>` alt prop does not contain the word "image", "picture", or "photo".'
    },
    schema: [schema]
  },
  create: function create(context) {
    var elementType = (0, _getElementType["default"])(context);
    return {
      JSXOpeningElement: function JSXOpeningElement(node) {
        var options = context.options[0] || {};
        var componentOptions = options.components || [];
        var typesToValidate = ['img'].concat(componentOptions);
<<<<<<< HEAD
        var nodeType = elementType(node);
=======
        var nodeType = (0, _jsxAstUtils.elementType)(node); // Only check 'label' elements and custom types.
>>>>>>> 2b8c8494cd2694e97572d3bff0553fd3efc6ca4c

        if (typesToValidate.indexOf(nodeType) === -1) {
          return;
        }
<<<<<<< HEAD
        var altProp = (0, _jsxAstUtils.getProp)(node.attributes, 'alt');
        // Return if alt prop is not present.
=======

        var altProp = (0, _jsxAstUtils.getProp)(node.attributes, 'alt'); // Return if alt prop is not present.

>>>>>>> 2b8c8494cd2694e97572d3bff0553fd3efc6ca4c
        if (altProp === undefined) {
          return;
        }
        var value = (0, _jsxAstUtils.getLiteralPropValue)(altProp);
        var isVisible = (0, _isHiddenFromScreenReader["default"])(nodeType, node.attributes) === false;
        var _options$words = options.words,
<<<<<<< HEAD
          words = _options$words === void 0 ? [] : _options$words;
=======
            words = _options$words === void 0 ? [] : _options$words;
>>>>>>> 2b8c8494cd2694e97572d3bff0553fd3efc6ca4c
        var redundantWords = REDUNDANT_WORDS.concat(words);
        if (typeof value === 'string' && isVisible) {
<<<<<<< HEAD
          var hasRedundancy = new RegExp("(?!{)\\b(".concat(redundantWords.join('|'), ")\\b(?!})"), 'i').test(value);
=======
          var hasRedundancy = redundantWords.some(function (word) {
            return Boolean(value.match(new RegExp("(?!{)\\b".concat(word, "\\b(?!})"), 'i')));
          });

>>>>>>> 2b8c8494cd2694e97572d3bff0553fd3efc6ca4c
          if (hasRedundancy === true) {
            context.report({
              node,
              message: errorMessage
            });
          }
        }
      }
    };
  }
};
module.exports = exports.default;